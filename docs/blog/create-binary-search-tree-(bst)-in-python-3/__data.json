{"type":"data","nodes":[null,{"type":"data","data":[{"post":1},{"slug":2,"date":3,"date_formatted":4,"title":5,"description":6,"metadata":7,"file":46,"content":47},"create-binary-search-tree-(bst)-in-python-3","2021-01-03T22:00:03+05:30","Jan 3, 2021","Create Binary Search Tree (BST) in Python 3","Tutorial on building Binary Search Tree Data Structure using Pure Python.",{"title":5,"date":3,"draft":8,"description":6,"author":9,"showToc":10,"cover":11,"readingTime":12,"toc":13},"false","Me",true,"https://images.pexels.com/photos/268533/pexels-photo-268533.jpeg","4",[14,19,23,26,30,34,38,42],{"content":15,"slug":16,"lvl":17,"i":18,"seen":18},"What are Binary Search Trees?","what-are-binary-search-trees?",1,0,{"content":20,"slug":21,"lvl":22,"i":17,"seen":18},"What about duplicate values?","what-about-duplicate-values?",2,{"content":24,"slug":25,"lvl":22,"i":22,"seen":18},"What are the operations that can be performed on BST?","what-are-the-operations-that-can-be-performed-on-bst?",{"content":27,"slug":28,"lvl":22,"i":29,"seen":18},"Where can I make use of this?","where-can-i-make-use-of-this?",3,{"content":31,"slug":32,"lvl":22,"i":33,"seen":18},"Dark side of the BST?","dark-side-of-the-bst?",4,{"content":35,"slug":36,"lvl":22,"i":37,"seen":18},"How to improve BST?","how-to-improve-bst?",5,{"content":39,"slug":40,"lvl":17,"i":41,"seen":18},"Code","code",6,{"content":43,"slug":44,"lvl":17,"i":45,"seen":18},"References","references",7,"old\\tuto-bst-py3.md","\u003Ch1 id=\"what-are-binary-search-trees?\" class=\"group text-3xl font-bold mt-4 dark:text-neutral-200\">What are Binary Search Trees?\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#what-are-binary-search-trees?\">#\u003C/a>\u003C/h1>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">This will by my first topic on which I will be showing you guys on how to implement a binary search tree datastructre(DS) and go through the basic fundamentals. \u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">So a Binary Search Tree (BST) is a type of graph data structrue where you have many nodes arranged in a reversed tree fashion. Each node starting from the top (which is called as root node) is split into two sub trees. This holds good for all Binary Trees but when it comes to BST there is an addtional property which the tree must hold. This property basically states that &quot;values of the nodes on the left subtree much be smaller when compared to the root value and values of the nodes on the right subtree should be larger when compared to the root value.\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Node are the basic units for a BST. In our case, each node holds a value and contains reference to left subtree and right subtree.\u003C/p>\n\u003Ch2 id=\"what-about-duplicate-values?\" class=\"group text-2xl font-bold  mt-4 dark:text-neutral-200\">What about duplicate values?\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#what-about-duplicate-values?\">#\u003C/a>\u003C/h2>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Well dependening on your use case you can choose to retain or drop the duplicate entry. If you are going to keep them then there are two easy solution. One is to insert this new record on either side of the tree maintaining the BST rule. But this implementation could be tedious and search will require little more effort to find all the entries. Better way to do this is by storing a count/frequency variable for each of node and increase is as and when the nodes are inserted. For the existing node you just find the node and update the count value.\u003C/p>\n\u003Ch2 id=\"what-are-the-operations-that-can-be-performed-on-bst?\" class=\"group text-2xl font-bold  mt-4 dark:text-neutral-200\">What are the operations that can be performed on BST?\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#what-are-the-operations-that-can-be-performed-on-bst?\">#\u003C/a>\u003C/h2>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">A basic implementation of BST can be used to perform the following operations:\u003C/p>\n\u003Col class=\" space-y-1 list-decimal list-inside\" >\n\u003Cli class=\" text-neutral-700 dark:text-neutral-300 leading-loose\">Insert: We add a new node into the BST. Duplicates are ignored.\u003C/li>\n\u003Cli class=\" text-neutral-700 dark:text-neutral-300 leading-loose\">Delete: Removing a node from the BST. Involes Tree re-organization. \u003C/li>\n\u003Cli class=\" text-neutral-700 dark:text-neutral-300 leading-loose\">Search: Checking if a value exists in any of nodes in the BST.\u003C/li>\n\u003Cli class=\" text-neutral-700 dark:text-neutral-300 leading-loose\">Traverse: Visiting each and every node of the BST in some fashion. In-order traversal is common used technique which will print out the elements of the tree in sorted order. There are also other traversal techniques like Pre-Order and Post-Order.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"where-can-i-make-use-of-this?\" class=\"group text-2xl font-bold  mt-4 dark:text-neutral-200\">Where can I make use of this?\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#where-can-i-make-use-of-this?\">#\u003C/a>\u003C/h2>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">There are the some of the typical use case where people tend to go with BST:\u003C/p>\n\u003Col class=\" space-y-1 list-decimal list-inside\" >\n\u003Cli class=\" text-neutral-700 dark:text-neutral-300 leading-loose\">Sorting: Maintaing a sorted stream of data.\u003C/li>\n\u003Cli class=\" text-neutral-700 dark:text-neutral-300 leading-loose\">Other Data Structure Implementation: TreeMap and TreeSet DataStructure in Java uses BST internally.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"dark-side-of-the-bst?\" class=\"group text-2xl font-bold  mt-4 dark:text-neutral-200\">Dark side of the BST?\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#dark-side-of-the-bst?\">#\u003C/a>\u003C/h2>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Let us consider a scenario where a BST is created in such a way that it keeps growing at one sides. There is more general term for this called Skew. If the nodes are inserted to every node&#39;s left subtree and until it forms this linear chained nodes, this type of BST is said to be left-skewed. A search operation will have to go through each and every N nodes of this tree to find the value so the worst case time complexity is said to be O(n). Similar can happen while adding and deleting the nodes.\u003C/p>\n\u003Ch2 id=\"how-to-improve-bst?\" class=\"group text-2xl font-bold  mt-4 dark:text-neutral-200\">How to improve BST?\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#how-to-improve-bst?\">#\u003C/a>\u003C/h2>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">You might have thought by now, if the problem with BST occurs when it keeps adding the nodes to only one side then if we could split up or do some operation that would re-organize the tree. This type of data structure is called Self-Balancing BST. I might be writing about them in the future.\u003C/p>\n\u003Ch1 id=\"code\" class=\"group text-3xl font-bold mt-4 dark:text-neutral-200\">Code\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#code\">#\u003C/a>\u003C/h1>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">First and foremast part of creating this BST is to create the basic units, which is Node. Each node stores a value and contains references to left and right subtrees. \u003C/p>\n\u003Cscript src=\"https://gist.github.com/rahuldshetty/143b874030eac5e850b355aee509db2b.js\">\u003C/script>\n\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Then we can create a BST data structure with all the operations. We are using class to define the template. Each object of this class will contain a private member called root which is only accessible within the member functions. Each of the operations use a recursive logic to perform the action. So for this we made use of nested functions which will handle the recursive calls. \u003C/p>\n\u003Cscript src=\"https://gist.github.com/rahuldshetty/e529ae147fad1b5493d95795f1aa7af0.js\">\u003C/script>\n\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Just to test out if the implementation is right or wrong, I have created this sample file which will create an empty BST and does all the operations on the Tree. Notice that for In-Order traversal, the path printed by tree contains node value in sorted manner.\u003C/p>\n\u003Cscript src=\"https://gist.github.com/rahuldshetty/4b5d84647b3c94a5d77f26a44676019c.js\">\u003C/script>\n\n\u003Ch1 id=\"references\" class=\"group text-3xl font-bold mt-4 dark:text-neutral-200\">References\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#references\">#\u003C/a>\u003C/h1>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">I found these links helpful for writing this blog:\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">\u003Ca href=\"https://www.geeksforgeeks.org/binary-search-tree-set-1-search-and-insertion/\" class=\"underline underline-offset-8 md:underline-offset-4 text-sky-800 dark:text-sky-200\">BST Basics\u003C/a>\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">\u003Ca href=\"https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/\" class=\"underline underline-offset-8 md:underline-offset-4 text-sky-800 dark:text-sky-200\">BST Delete\u003C/a>\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">\u003Ca href=\"https://www.geeksforgeeks.org/how-to-handle-duplicates-in-binary-search-tree/\" class=\"underline underline-offset-8 md:underline-offset-4 text-sky-800 dark:text-sky-200\">Handling Duplicates in BST\u003C/a>\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">\u003Ca href=\"https://en.wikipedia.org/wiki/Binary_search_tree#Examples_of_applications\" class=\"underline underline-offset-8 md:underline-offset-4 text-sky-800 dark:text-sky-200\">Applications\u003C/a>\u003C/p>\n"],"uses":{"params":["slug"]}}]}
