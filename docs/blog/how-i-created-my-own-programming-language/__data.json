{"type":"data","nodes":[null,{"type":"data","data":[{"post":1},{"slug":2,"date":3,"date_formatted":4,"title":5,"description":6,"metadata":7,"file":42,"content":43},"how-i-created-my-own-programming-language","2022-12-18T00:00:00+05:30","Dec 18, 2022","How I created my own Programming Language","In this article, I go over the topics on how to build your own programming language.",{"title":5,"date":3,"draft":8,"description":6,"author":9,"showToc":10,"cover":11,"readingTime":12,"toc":13},"false","Me",false,"https://raw.githubusercontent.com/munificent/craftinginterpreters/master/site/image/a-map-of-the-territory/mountain.png","5",[14,19,23,28,31,34,38],{"content":15,"slug":16,"lvl":17,"i":18,"seen":18},"Introduction","introduction",3,0,{"content":20,"slug":21,"lvl":17,"i":22,"seen":18},"The Beginning","the-beginning",1,{"content":24,"slug":25,"lvl":26,"i":27,"seen":18},"Tokenization","tokenization",4,2,{"content":29,"slug":30,"lvl":26,"i":17,"seen":18},"Parsing","parsing",{"content":32,"slug":33,"lvl":17,"i":26,"seen":18},"Optimization","optimization",{"content":35,"slug":36,"lvl":17,"i":37,"seen":18},"Evaluation","evaluation",5,{"content":39,"slug":40,"lvl":17,"i":41,"seen":18},"Links","links",6,"old\\my-first-programming-language.md","\u003Ch3 id=\"introduction\" class=\"group text-xl font-bold  mt-4 dark:text-neutral-200\">Introduction\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#introduction\">#\u003C/a>\u003C/h3>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Programming languages are nothing but programs written by other programmers for you to program your programs. These days developers take programming language for granted, not everyone are interested in understanding the complexity that goes behind a simple &quot;Hello world&quot; program until they run into issue for their complex program where they need to start digging into the Source code program to find out why there is a weird Null Pointer Exception or memory leak happening in the code.\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Early day programmers did not have fancy IDEs, intellisense software that could identify errors before even you run the program. They used to write their program on a physical punch card and then run them through the machines (or PC) that would take several hours to execute. There would be an operator who would work on creating and processing these cards on a machine. \u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Designing a programming language is similar to how you would program a simple code for your web API or some automation. The main task that Programing language does is, it allows you to write some instruction and then convert it to form understood by your machine. There are various ways by which you can design your own language. In this article, I will talk about how I designed 2 of my own programming language using a concept of Tree Walking Interpreter.\u003C/p>\n\u003Ch3 id=\"the-beginning\" class=\"group text-xl font-bold  mt-4 dark:text-neutral-200\">The Beginning\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#the-beginning\">#\u003C/a>\u003C/h3>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Before starting with the program design you&#39;d need to decide on what are the programming language constructs that you want to support in the language. Almost all language have these basics covered when it comes to language implementation:\u003C/p>\n\u003Col class=\" space-y-1 list-decimal list-inside\" >\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">Variable Declarations\u003C/li>\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">Expression evaluation statements like mathematical operation, function call, object declaration etc. \u003C/li>\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">Control Statements like if/else, for, while, etc. \u003C/li>\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">Object Oriented Programming (OOP)\u003C/li>\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">Primitive data structures like Array, Maps/Hash, Set etc.\u003C/li>\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">Standard Library for Input/Output Processing, Handling File System reads etc.\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"tokenization\" class=\"group text-lg font-bold  mt-4 dark:text-neutral-200\">Tokenization\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#tokenization\">#\u003C/a>\u003C/h4>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Based on these factors, you can come up with how the syntax of your language should look like and start working on the first stage of compiler or interpreter design called \u003Cem>Tokenizer\u003C/em>. Tokenization is the first process for any programming language that wants to include source-code processing engine whose responsibility is to take in source code and generate Tokens. \u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Tokens in C programming language is as simple as &quot;if&quot;, &quot;int&quot;, &quot;printf&quot;, &quot;(&quot;, &quot;)&quot; etc. Tokenizer can generate tokens with following information:\u003C/p>\n\u003Col class=\" space-y-1 list-decimal list-inside\" >\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">Type of Token (Function, Keyword, Identifier, etc)\u003C/li>\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">Line number of the Token (Useful when showing errors)\u003C/li>\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">Literal value of the Token (Raw string content of text, &quot;if&quot;, &quot;variable_name&quot; etc)\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"parsing\" class=\"group text-lg font-bold  mt-4 dark:text-neutral-200\">Parsing\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#parsing\">#\u003C/a>\u003C/h4>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">In the second stage, we read the tokens generated by the tokenizer and try to build a Syntax tree. This tree contains expressions and statements arranged in well, Tree structure. The tree is build up in such a way that it satisfies the grammar rules for our language. If a user has written a bad code which is syntactically wrong then, at this stage we can alert the user as whatever the rule user has written it breaks the grammar rule. Most compilers would stop from building executables until your code is  syntactically correct. In Interpreters, we basically alert user about their code issues and go to a recovery mode where we still continue parsing for more errors.\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Following is a example code for my programming language LoxPy: \u003C/p>\n\u003Cdiv class=\"code-block\">\u003Cpre class=\"language-javascript\">\u003Ccode>\u003Cspan class=\"token keyword\">var\u003C/span> value \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">This generates following syntax tree in LoxPy:\u003C/p>\n\u003Cdiv class=\"code-block\">\u003Cpre class=\"language-javascript\">\u003Ccode>    Var\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Statement\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n        name \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">Identifier\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n            name \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"value\"\u003C/span>\n        \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n        value \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">Expression\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n            value \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">Add\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n                left \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">Value\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n                right \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">Value\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n            \u003Cspan class=\"token punctuation\">)\u003C/span>\n        \u003Cspan class=\"token punctuation\">)\u003C/span>\n    \u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">This completes the frontend of the programming language. The reason its called frontend because all the rules/syntax for your language is handled in these stages.\u003C/p>\n\u003Ch3 id=\"optimization\" class=\"group text-xl font-bold  mt-4 dark:text-neutral-200\">Optimization\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#optimization\">#\u003C/a>\u003C/h3>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Program performance is critical when it comes to building faster applications. Early day systems were not as powerful as a personal computers or mobiles that we have today. Programs would take hours or days sometimes to evaluate. Programmers had to work with limited memory for writing their complete program and use some hacks to optimize their code. \u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">For my programming language LoxPy and Talion, I haven&#39;t used any of the optimization techniques. The AST form is the intermediate representation (IR) for my languages. You can either take AST and optimize it to generate another IR or directly convert AST to a machine level program that can be optimized. There are different \u003Ca href=\"https://en.wikipedia.org/wiki/Optimizing_compiler\" class=\"underline underline-offset-8 md:underline-offset-4 text-sky-800 dark:text-sky-200\">strategies\u003C/a> to perform code optimization like \u003Ca href=\"https://en.wikipedia.org/wiki/Dead-code_elimination\" class=\"underline underline-offset-8 md:underline-offset-4 text-sky-800 dark:text-sky-200\">Dead Code Elimination\u003C/a>, \u003Ca href=\"https://en.wikipedia.org/wiki/Loop_optimization\" class=\"underline underline-offset-8 md:underline-offset-4 text-sky-800 dark:text-sky-200\">Loop Optimization\u003C/a>, Speed, Resources etc.\u003C/p>\n\u003Ch3 id=\"evaluation\" class=\"group text-xl font-bold  mt-4 dark:text-neutral-200\">Evaluation\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#evaluation\">#\u003C/a>\u003C/h3>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">At this stage you need to make decision on how you want to run the program. There are 2 ways you can go about designing this for your programming language:\u003C/p>\n\u003Col class=\" space-y-1 list-decimal list-inside\" >\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Compile: You can take the AST and compile them to a machine executable program. Machine can be your direct system (C, C++, Go) or another virtual machine (Python, Java). The executable file is also termed as byte code.\u003C/p>\n\u003C/li>\n\u003Cli class=\"text-neutral-700 dark:text-neutral-300 leading-loose mx-2 my-2 text-sm \">\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Interpret: You can directly start evaluating AST in an underlying backend program. Python is an example for both compiled and interpreted programming language. Here the python code is first compiled to byte code and then interpreted using a Python Virtual Machine.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">One of the easiest implementation of a interpreter is Tree Walking Interpreter. AST nodes are evaluated node-by-node at each instruction levels. \u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">\u003Cimg src=\"https://miro.medium.com/max/720/0*WP1KIDFEgmt7bXHU.webp\" alt=\"Tree Walking Interpreter stages: https://imantung.medium.com/tree-walk-interpreter-b33fe5c19a63\" class=\"justify-center p-2 mx-auto block\" >\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Early implementation of languages like Ruby, R  had this technique of evaluation. As each node reference has to be stored in memory, this used to be expensive. If you want to introduce closures, classes to your language then you need to start handling resolution based environment handling (addressing identifier, function, class names) which again lead to storing a complete copy or reference of set of variables in body of these objects. \u003C/p>\n\u003Ch3 id=\"links\" class=\"group text-xl font-bold  mt-4 dark:text-neutral-200\">Links\u003Ca class=\"mx-1 text-transparent group-hover:underline group-hover:underline-offset-8 group-hover:text-gray-700\" href=\"#links\">#\u003C/a>\u003C/h3>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">Crafting Interpreters: \u003Ca href=\"https://craftinginterpreters.com\" class=\"underline underline-offset-8 md:underline-offset-4 text-sky-800 dark:text-sky-200\">Want to build your own language?\u003C/a>\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">My programming languages:\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">LoxPy: \u003Ca href=\"https://github.com/rahuldshetty/loxpy\" class=\"underline underline-offset-8 md:underline-offset-4 text-sky-800 dark:text-sky-200\">Github\u003C/a>\u003C/p>\n\u003Cp class=\"mt-4 text-neutral-700 dark:text-neutral-300 leading-loose\">talion: \u003Ca href=\"https://rahuldshetty.github.io/talion/\" class=\"underline underline-offset-8 md:underline-offset-4 text-sky-800 dark:text-sky-200\">Github\u003C/a>\u003C/p>\n"],"uses":{"params":["slug"]}}]}
